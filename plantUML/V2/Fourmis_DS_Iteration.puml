@startuml
'https://plantuml.com/sequence-diagram

skinparam style strictuml
skinparam responseMessageBelowArrow true
skinparam roundcorner 20
skinparam ArrowColor #black
hide footbox

participant "AntFacade:ant" as ant #lightgreen
participant "Graphe:g" as graphe #lightcoral

== Mise en place du Graphe ==
' ---------GRAPHE--------------
ant -> ant++ #lightgreen : createGrid(width, height)
    ant --> graphe++ #lightcoral : <<Create>> Graphe(width, height)
return
return

graphe -> graphe++ #lightcoral : creationEmplacementNoeud()
loop i<taille.length
    loop i<taille[i].length
        ' ---------NOEUD--------------
            create "n:Noeud"
            graphe --> "n:Noeud" : <<Create>> Noeud(g)
            graphe <- "n:Noeud"++ #FFBBBB: getEmplacementNoeud(n)
                return noeud
    end
end
return

ant -> ant++ #lightgreen : putObstacle(x,y)
    ant -> graphe++ #lightcoral : mettreObstacle(x,y)
return
return

ant -> ant++ #lightgreen : putFood(x,y,quantity)
    ant -> graphe++ #lightcoral : mettreNourriture(x,y,quantity)
return
return

' ---------AntFacade Historique--------------
ant -> ant++ #lightgreen : setAntFile(antLogFile)
    create "antHisto:AntFacadeHistorique"
    ant -> "antHisto:AntFacadeHistorique" : <<Create>> AntFacadeHistorique(width,height, grid, antLogFile)
return


== Création des Fourmis ==
' ---------REINE--------------
ant -> ant++ #lightgreen : createColony(x, y)
create "r:Reine"
    ant --> "r:Reine" : <<Create>> Reine(x,y,g)
return

' ---------COLONIE--------------
create "c:Colonie"
"r:Reine" --> "c:Colonie" : <<Create>> Colonie()

ant -> ant++ #lightgreen : setParameters(evapaParam,foodParam,pheroParam)
    ant -> "r:Reine"++ #lightcoral : setParametreColonie(evapaParam,foodParam,pheroParam)
    "r:Reine" -> "c:Colonie"++ #FFBBBB: setFoodParam(foodParam)
    return
    "r:Reine" -> "c:Colonie"++ #FFBBBB: setEvaporationParam(evapaParam)
    return
    "r:Reine" -> "c:Colonie"++ #FFBBBB: setPheromoneParam(pheroParam)
    return
return
return

ant -> ant++ #lightgreen : createSoldiers(amount)
    ant -> "r:Reine"++ #lightblue : giveBirthSoldier(amount)
    loop i<amount
        ' ---------SOLDAT--------------
        create "s:Soldat"
        "r:Reine" --> "s:Soldat" : <<Create>> Soldat(x,y,c,g)
    end
return
return

ant -> ant++ #lightgreen : createWorkers(amount)
    ant -> "r:Reine"++ #lightblue : giveBirthWorker(amount)
    loop i<amount
        ' ---------OUVRIER--------------
        create "o:Ouvrier"
        "r:Reine" --> "o:Ouvrier" : <<Create>> Ouvrier(x,y,c,g)
    end
return
return

participant "MoveSoldat:ms" as MoveSoldat #Wheat
participant "MoveOuvrier:mo" as MoveOuvrier #Wheat
== Déclenchement des itérations ==
ant -> ant++ #RoyalBlue : play(time, false)
alt record == true
    ant --> "antHisto:AntFacadeHistorique"++ #DeepSkyBlue : startFile()
    return
end
loop i<duration

    '----------Mettre phéromne -------------
    loop x<height
        loop y<width
            alt nbEvaporation!=0
                alt tabQuantityPheromone[x][y] >= nbEvaporation
                    ant --> graphe++ #FFBBBB : setQuantityPheromone(tabQuantityPheromone)
                    return
                else sinon
                    ant --> graphe++ #FFBBBB : setQuantityPheromone(tabQuantityPheromone)
                    return
                end
            end
        end
    end

    '----------Mettre phéromne -------------

    ' ---------Déplacer Soldat--------------

    alt this.theSoldiers != null
        loop Soldat s : MoveSoldat
            ant -> "s:Soldat"++ #lightcoral
                "s:Soldat" -> MoveSoldat++ #FFBBBB: randomDirection(this.g, soldat, r)
                    ' ---------ARETES--------------
                    create "arr:Aretes"
                    MoveSoldat --> "arr:Aretes" : <<Create>> Aretes(g,x,y)
                    "arr:Aretes" -> "arr:Aretes"++ #DarkSalmon : rechercheAretes()
                    loop y<=yTab+1
                        loop x<=xTab+1
                            alt x == xTab || y == yTab
                                alt verficationNoeud(x, y) == true
                                    "arr:Aretes" -> "arr:Aretes"++ #FFBBBB : verficationNoeud(x,y)
                                        alt (tab[x][y] != tab[xTab][yTab]) && !estObstacle[x][y]
                                            "arr:Aretes" -> "arr:Aretes"++ #FFBBBB : ajouterAretes(x,y)
                                            return
                                        end
                                    return
                                end
                            end
                        end
                    end
                return
            return
            ant -> "s:Soldat"++ #FFBBBB : recherchePositionActuel(x,y)
            return
        end
    end
    return
    ' ---------Déplacer Soldat--------------

    ' ---------Déplacer Ouvrier--------------
    alt this.theWorkers != null
        loop Ouvrier o : MoveOuvrier
        alt o.isEtatRetour() && !o.doitRetravailler()
            ant -> "o:Ouvrier"++ #lightcoral
            "o:Ouvrier"  -> MoveOuvrier++ #FFBBBB : cheminRetour(ouvrier)
            return
            return

        else sinon
             ant -> "o:Ouvrier"++ #lightcoral
            "o:Ouvrier" -> MoveOuvrier++ #FFBBBB : randomDirection(this.g, ouvrier, r)
             ' ---------ARETES OUVRIER--------------
             create "arrO:AretesOuvriers"
             MoveOuvrier --> "arrO:AretesOuvriers" : <<Create>> Aretes(g,x,y)
             MoveOuvrier --> "arrO:AretesOuvriers"++ #DarkSalmon: paramOuvrier(ouvrier)
                "arrO:AretesOuvriers" --> "arrO:AretesOuvriers"++ #FFBBBB : rechercheToutVisite(ouvrier)
                "arrO:AretesOuvriers" --> "arrO:AretesOuvriers"++ #FFBBBB : rechercheAucunPheromone(droitDePasssage)
                alt !rechercheAucunPheromone(droitDePasssage)
                    loop x<listX.size()
                        loop j<listY.size()
                            alt !aVisite[xCoord][yCoord] || droitDePasssage
                                "arrO:AretesOuvriers" --> "arrO:AretesOuvriers"++ #FFBBBB: rechercheBestPheromone(xCoord,yCoord)
                                return
                            end
                        end
                    end
             return
             return
             return
             return
        end
        end
        ant -> "o:Ouvrier"++ #FFBBBB : recherchePositionActuel(x,y)
        return
    end
    return
    ' ---------Déplacer Ouvrier--------------
    end
' ---------Fichier historique des fourmis--------------
== Mise à jour du fichier d'historique des fourmis ==
    alt record == true
        ant --> "antHisto:AntFacadeHistorique"++ #DeepSkyBlue : iteration(this.grid, this.theSoldiers, this.theWorkers)
            loop Ouvrier o : theWorkers
                "antHisto:AntFacadeHistorique" --> "o:Ouvrier"++ #DeepSkyBlue: toString()
                return
                "antHisto:AntFacadeHistorique" --> MoveOuvrier++ #DeepSkyBlue: noeudVoisin(ouvrier)
                create "arr1:Aretes"
                MoveOuvrier --> "arr1:Aretes" : <<Create>> Aretes(g,x,y)
                MoveOuvrier --> "arr1:Aretes"++ #DeepSkyBlue: noeudVoisin(ouvrier)
                return
                return
            end
            loop Soldat s : theSoldiers
                "antHisto:AntFacadeHistorique" --> "s:Soldat"++ #DeepSkyBlue : toString()
                return
                "antHisto:AntFacadeHistorique" --> MoveSoldat++ #DeepSkyBlue: noeudVoisin(soldat)
                create "arr2:Aretes"
                MoveOuvrier --> "arr2:Aretes" : <<Create>> Aretes(g,x,y)
                MoveSoldat --> "arr2:Aretes"++ #DeepSkyBlue: noeudVoisin(soldat)
                return
                return
            end
        return
    end
end

alt record == true
    ant --> "antHisto:AntFacadeHistorique"++ #DeepSkyBlue : closeFile()
    return
end
return

@enduml
@startuml
'https://plantuml.com/sequence-diagram

skinparam style strictuml
skinparam responseMessageBelowArrow true
skinparam roundcorner 20
skinparam ArrowColor #black
hide footbox

participant "AntFacade:ant" as ant #lightgreen
participant "Graphe:g" as graphe #lightcoral

== Mise en place du Graphe ==
' ---------GRAPHE--------------
ant -> ant++ #lightgreen : createGrid(width, height)
    ant --> graphe++ #lightcoral : <<Create>> Graphe(width, height)
return
return

graphe -> graphe++ #lightcoral : creationEmplacementNoeud()
loop i<taille.length
    loop i<taille[i].length
        ' ---------NOEUD--------------
            create "n:Noeud"
            graphe --> "n:Noeud" : <<Create>> Noeud(g)
            graphe <- "n:Noeud"++ : getEmplacementNoeud(n)
                return noeud
    end
end
return

ant -> ant++ #lightgreen : putObstacle(x,y)
    ant -> graphe++ #lightcoral : mettreObstacle(x,y)
return
return

ant -> ant++ #lightgreen : putFood(x,y,quantity)
    ant -> graphe++ #lightcoral : mettreNourriture(x,y,quantity)
return
return


== Création des Fourmis ==
' ---------REINE--------------
ant -> ant++ #lightgreen : createColony(x, y)
create "r:Reine"
    ant --> "r:Reine" : <<Create>> Reine(x,y,g)
return

' ---------COLONIE--------------
create "c:Colonie"
"r:Reine" --> "c:Colonie" : <<Create>> Colonie()

ant -> ant++ #lightgreen : setParameters(evapaParam,foodParam,pheroParam)
    ant -> "r:Reine"++ #lightcoral : setParametreColonie(evapaParam,foodParam,pheroParam)
    "r:Reine" -> "c:Colonie"++ : setFoodParam(foodParam)
    return
    "r:Reine" -> "c:Colonie"++ : setEvaporationParam(evapaParam)
    return
    "r:Reine" -> "c:Colonie"++ : setPheromoneParam(pheroParam)
    return
return
return

ant -> ant++ #lightgreen : createSoldiers(amount)
    ant -> "r:Reine"++ #lightblue : giveBirthSoldier(amount)
    loop i<amount
        ' ---------SOLDAT--------------
        create "s:Soldat"
        "r:Reine" --> "s:Soldat" : <<Create>> Soldat(x,y,c,g)
    end
return
return

ant -> ant++ #lightgreen : createWorkers(amount)
    ant -> "r:Reine"++ #lightblue : giveBirthWorker(amount)
    loop i<amount
        ' ---------OUVRIER--------------
        create "o:Ouvrier"
        "r:Reine" --> "o:Ouvrier" : <<Create>> Ouvrier(x,y,c,g)
    end
return
return

participant "MoveSoldat:ms" as MoveSoldat #Wheat
participant "MoveOuvrier:mo" as MoveOuvrier #Wheat
== Déclenchement des itérations ==
ant -> ant++ #DarkSalmon : play(time, false)
loop i<duration

    '----------Mettre phéromne -------------
    loop x<height
        loop y<width
            alt nbEvaporation!=0
                alt tabQuantityPheromone[x][y] >= nbEvaporation
                    ant --> graphe++ #FFBBBB : setQuantityPheromone(tabQuantityPheromone)
                    return
                else sinon
                    ant --> graphe++ #FFBBBB : setQuantityPheromone(tabQuantityPheromone)
                    return
                end
            end
        end
    end

    '----------Mettre phéromne -------------

    ' ---------Déplacer Soldat--------------
    ant -> "s:Soldat"++ #DarkSalmon
    alt this.theSoldiers != null
        loop Soldat s : MoveSoldat
            "s:Soldat" -> MoveSoldat : randomDirection(this.g, soldat, r)
            ' ---------ARETES--------------
            create "arr:Aretes"
            MoveSoldat --> "arr:Aretes" : <<Create>> Aretes(g,x,y)
            "arr:Aretes" -> "arr:Aretes"++ #DarkSalmon : rechercheAretes()
            loop y<=yTab+1
                loop x<=xTab+1
                    alt x == xTab || y == yTab
                        alt verficationNoeud(x, y) == true
                            "arr:Aretes" -> "arr:Aretes"++ #FFBBBB : verficationNoeud(x,y)
                                alt (tab[x][y] != tab[xTab][yTab]) && !estObstacle[x][y]
                                    "arr:Aretes" -> "arr:Aretes"++ #FFBBBB : ajouterAretes(x,y)
                                    return
                                end
                            return
                        end
                    end
                end
            end
            return
            "s:Soldat" -> "s:Soldat"++ #FFBBBB : recherchePositionActuel(x,y)
            return
        end
    end
    return
    ' ---------Déplacer Soldat--------------

    ' ---------Déplacer Ouvrier--------------
    ant -> "o:Ouvrier"++ #DarkSalmon
    alt this.theWorkers != null
        loop Ouvrier o : MoveOuvrier
        alt o.isEtatRetour() && !o.doitRetravailler()
            "o:Ouvrier"  -> MoveOuvrier++ #FFBBBB : cheminRetour(ouvrier)
            return

        else sinon
            "o:Ouvrier" -> MoveOuvrier : randomDirection(this.g, ouvrier, r)
             ' ---------ARETES OUVRIER--------------
             create "arrO:AretesOuvriers"
             MoveOuvrier --> "arrO:AretesOuvriers" : <<Create>> Aretes(g,x,y)
             MoveOuvrier --> "arrO:AretesOuvriers"++ #DarkSalmon: paramOuvrier(ouvrier)
                "arrO:AretesOuvriers" --> "arrO:AretesOuvriers"++ #FFBBBB : rechercheToutVisite(ouvrier)
                "arrO:AretesOuvriers" --> "arrO:AretesOuvriers"++ #FFBBBB : rechercheAucunPheromone(droitDePasssage)
                alt !rechercheAucunPheromone(droitDePasssage)
                    loop x<listX.size()
                        loop j<listY.size()
                            alt !aVisite[xCoord][yCoord] || droitDePasssage
                                "arrO:AretesOuvriers" --> "arrO:AretesOuvriers"++ #FFBBBB: rechercheBestPheromone(xCoord,yCoord)
                                return
                            end
                        end
                    end
             return
        end
        end
        "o:Ouvrier" -> "o:Ouvrier"++ #FFBBBB : recherchePositionActuel(x,y)
        return
    end
    return
    ' ---------Déplacer Ouvrier--------------

end
end
return




@enduml
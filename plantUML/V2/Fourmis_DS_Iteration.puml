@startuml
'https://plantuml.com/sequence-diagram

skinparam style strictuml
skinparam responseMessageBelowArrow true
skinparam roundcorner 20
skinparam ArrowColor #black
hide footbox

participant "AntFacade:ant" as ant #lightgreen
participant "Graphe:g" as graphe #lightcoral

== Mise en place du Graphe ==
' ---------GRAPHE--------------
ant -> ant++ #lightgreen : createGrid(width, height)
    ant --> graphe++ #lightcoral : <<Create>> Graphe(width, height)
        graphe -> graphe++ #lightcoral : creationEmplacementNoeud()
        loop i<taille.length
            loop i<taille[i].length
                ' ---------NOEUD--------------
                    create "n:Noeud"
                    graphe --> "n:Noeud"++ #FFBBBB: <<Create>> Noeud(g, numNoeud)
                        return
            end
        end
        return
    return
return

ant -> ant++ #lightgreen : putObstacle(x,y)
    ant -> graphe++ #lightcoral : mettreObstacle(x,y)
return
return

ant -> ant++ #lightgreen : putFood(x,y,quantity)
    ant -> graphe++ #lightcoral : mettreNourriture(x,y,quantity)
return
return

' ---------AntFacade Historique--------------
ant -> ant++ #lightgreen : setAntFile(antLogFile)
    create "antHisto:AntFacadeHistorique"
    ant -> "antHisto:AntFacadeHistorique" ++ #FFBBBB: <<Create>> AntFacadeHistorique(width,height, grid, antLogFile)
        return
return


== Création des Fourmis ==
' ---------REINE--------------
ant -> ant++ #lightgreen : createColony(x, y)
create "r:Reine"
    ant --> "r:Reine"++ #FFBBBB : <<Create>> Reine(x,y,g)

        ' ---------COLONIE--------------
        create "c:Colonie"
        "r:Reine" --> "c:Colonie"++ #FFBBBB: <<Create>> Colonie()
            return
return
return

ant -> ant++ #lightgreen : setParameters(evapaParam,foodParam,pheroParam)
    ant -> "r:Reine"++ #lightcoral : setParametreColonie(evapaParam,foodParam,pheroParam)
    "r:Reine" -> "c:Colonie"++ #FFBBBB: setFoodParam(foodParam)
    return
    "r:Reine" -> "c:Colonie"++ #FFBBBB: setEvaporationParam(evapaParam)
    return
    "r:Reine" -> "c:Colonie"++ #FFBBBB: setPheromoneParam(pheroParam)
    return
return
return

ant -> ant++ #lightgreen : createSoldiers(amount)
    ant -> "r:Reine"++ #lightblue : giveBirthSoldier(amount)
    loop i<amount
        ' ---------SOLDAT--------------
        create "s:Soldat"
        "r:Reine" --> "s:Soldat"++ #FFBBBB: <<Create>> Soldat(x,y,c,g)
            return
    end
return
return

ant -> ant++ #lightgreen : createWorkers(amount)
    ant -> "r:Reine"++ #lightblue : giveBirthWorker(amount)
    loop i<amount
        ' ---------OUVRIER--------------
        create "o:Ouvrier"
        "r:Reine" --> "o:Ouvrier"++ #FFBBBB : <<Create>> Ouvrier(x,y,c,g)
            return
    end
return
return

== Déclenchement des itérations ==
ant -> ant++ #RoyalBlue : play(time, true)
alt record == true
    ant --> "antHisto:AntFacadeHistorique"++ #DeepSkyBlue : startFile()
    return
end
loop i<duration

    '----------Mettre phéromne -------------
    loop x<height
        loop y<width
            alt nbEvaporation!=0
                alt i % nbEvaporation == 0
                    alt tabQuantityPheromone[x][y] >= nbEvaporation
                        ant --> graphe++ #FFBBBB : setQuantityPheromone(tabQuantityPheromone)
                        return
                    else sinon
                        ant --> graphe++ #FFBBBB : setQuantityPheromone(tabQuantityPheromone)
                        return
                    end
                end
            end
        end
    end

    '----------Mettre phéromne -------------

    ' ---------Déplacer Soldat--------------
    alt this.theSoldiers != null
        loop Soldat s : "s:Soldat"
            ant -> "s:Soldat"++ #lightcoral
                "s:Soldat" -> "s:Soldat"++ #FFBBBB: randomDirection()
                    ' ---------ARETES--------------
                    create "ms:FourmisMove"
                    "s:Soldat" --> "ms:FourmisMove"++ #lightcoral : rechercheAretes(x,y,g)
                        loop x<=xPosition+1
                            loop y<=yPosition+1
                                alt x == xPosition || y == yPosition
                                     "ms:FourmisMove" --> "ms:FourmisMove"++ #FFBBBB : verficationNoeud(x, y, g)
                                    return
                                end
                            end
                        end
                    return
                "s:Soldat" --> "ms:FourmisMove"++ #DarkSalmon : randomNoeud()
                 "ms:FourmisMove" --> "ms:FourmisMove"++ #FFBBBB: probabilityLaw(n,rand)
                 return
                return
            return
        end
    end
    return
    ' ---------Déplacer Soldat--------------

    ' ---------Déplacer Ouvrier--------------
    alt this.theWorkers != null
        loop Ouvrier o : "mo:MoveOuvrier"
        ant --> "s:Soldat"++ #lightcoral: doitRetravailler()
            return
        ant --> "s:Soldat"++ #lightcoral
            create "mo:MoveOuvrier"
            "s:Soldat" --> "mo:MoveOuvrier"++ #FFBBBB: isEtatRetour()
            return
        return
        alt o.isEtatRetour() && !o.doitRetravailler()
            ant -> "o:Ouvrier"++ #lightcoral

            "o:Ouvrier"  -> "mo:MoveOuvrier"++ #FFBBBB : cheminRetour(ouvrier)
            return
            return

        else sinon
             ant -> "o:Ouvrier"++ #lightcoral
            "o:Ouvrier" -> "mo:MoveOuvrier"++ #FFBBBB : randomDirection()
             ' ---------ARETES OUVRIER--------------
                 create "ms2:FourmisMove"
                 "mo:MoveOuvrier" --> "ms2:FourmisMove"++ #lightcoral : rechercheAretes(x,y,g)
                    loop x<=xPosition+1
                        loop y<=yPosition+1
                            alt x == xPosition || y == yPosition
                                 "ms2:FourmisMove" --> "ms2:FourmisMove"++ #FFBBBB : verficationNoeud(x, y, g)
                                return
                            end
                        end
                    end
                 return
                 "mo:MoveOuvrier" --> "ms2:FourmisMove"++ #FFBBBB: getListNoeud()
                    return
                 "mo:MoveOuvrier" --> graphe++ #FFBBBB: rechercherCoord(positionActuel)
                    return
                 "mo:MoveOuvrier" --> "mo:MoveOuvrier"++ #DarkSalmon: paramOuvrier(ouvrier)
                     "mo:MoveOuvrier" --> "mo:MoveOuvrier"++ #FFBBBB : rechercheToutVisite(ouvrier)
                         return
                     "mo:MoveOuvrier" --> "mo:MoveOuvrier"++ #FFBBBB : rechercheAucunPheromone(droitDePasssage)
                         alt !rechercheAucunPheromone(droitDePasssage)
                                "mo:MoveOuvrier" --> "mo:MoveOuvrier"++ #FFBBBB: rechercheBestPheromone(xCoord,yCoord)
                                return
                         end
                    return
                    "mo:MoveOuvrier" --> "ms2:FourmisMove"++ #FFBBBB: probabilityLaw(n,rand)
                    return
                return
                    "mo:MoveOuvrier" --> graphe++ #FFBBBB: getEstNourriture()
                        return
                    alt (g.getEstNourriture()[this.x][this.y])
                        "mo:MoveOuvrier" --> graphe++ #FFBBBB: gestionNourriture(x,y,colonie)
                        return
                    end
            return

        end
    end
    return
    ' ---------Déplacer Ouvrier--------------
    end
' ---------Fichier historique des fourmis--------------
== Mise à jour du fichier d'historique des fourmis ==
    alt record == true
        ant --> "antHisto:AntFacadeHistorique"++ #DeepSkyBlue : iteration(this.grid, this.theSoldiers, this.theWorkers)
            loop Ouvrier o : theWorkers
                "antHisto:AntFacadeHistorique" --> "o:Ouvrier"++ #DeepSkyBlue: toString()
                return
                "antHisto:AntFacadeHistorique" --> "mo:MoveOuvrier"++ #DeepSkyBlue: noeudVoisin(ouvrier)
                create "ms3:FourmisMove"
                "mo:MoveOuvrier" --> "ms3:FourmisMove"++ #DeepSkyBlue : rechercheAretes(x,y,graphe)
                return
                "mo:MoveOuvrier" --> "ms3:FourmisMove"++ #DeepSkyBlue: noeudVoisin(ouvrier)
                return
                return
            end
            loop Soldat s : theSoldiers
                "antHisto:AntFacadeHistorique" --> "s:Soldat"++ #DeepSkyBlue : toString()
                return
                "antHisto:AntFacadeHistorique" --> "mo:MoveOuvrier"++ #DeepSkyBlue: noeudVoisin(soldat, graphe)
                create "ms4:FourmisMove"
                "mo:MoveOuvrier" --> "ms4:FourmisMove"++ #DeepSkyBlue : rechercheAretes(x,y,graphe)
                return
                "mo:MoveOuvrier" --> "ms4:FourmisMove"++ #DeepSkyBlue: noeudVoisin(soldat, graphe)
                return
                return
            end
        return
    end
end

alt record == true
    ant --> "antHisto:AntFacadeHistorique"++ #DeepSkyBlue : closeFile()
    return
end
return

@enduml
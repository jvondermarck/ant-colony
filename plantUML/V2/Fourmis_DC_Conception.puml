@startuml
'https://plantuml.com/class-diagram

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam roundcorner 20
hide enum methods

package "Diagramme de Classe de Conception V2 " <<Folder>> {
  interface AntFacadeController <<interface>> #pink ##[bold]red {
      +setParameters(evaporationParam:Integer,
      foodParam:Integer, pheromoneParam:Integer)
      +createGrid(width:Integer, height:Integer)
      +putObstacle(row:Integer, column:Integer)
      +putFood(row:Integer, column:Integer, quantity:Integer)
      +createColony(row:Integer, column:Integer)
      +createSoldiers(amount:Integer)
      +createWorkers(amount:Integer)
      +setAntFile(antLogFile:String)
      +play(duration:Integer, record:Boolean) : BitSet[][]
  }

  class Graphe #lightcoral;line.bold {
      -estObstacle: boolean[*][*]
      -estNourriture: boolean[*][*]
      -quantityFood: Integer[*][*]
      -quantityPheromone: Integer[*][*]
      -airGraphe:Integer
      -row: Integer
      -column: Integer
      -nbrNoeudDansGraphe:Integer
      -theNoeud: Noeud[*][*]

      <<Create>>Graphe(longueur, largueur)
      +CreationEmplacement();
      +rechercherNoeud(x:Integer, y:Integer) : Noeud
      +rechercherCoord(n: Noeud): ArrayList<Integer>
      +gestionNourriture(x:Integer, y:Integer, c:Colonie): Integer
      +mettreObstacle(row:Integer, colomn:Integer)
      +mettreNourriture(row:Integer, colomn:Integer, quantity: Integer)

      +getAirGraphe(): Integer
      +getNbrNoeudDansGraphe(): Integer
      +getEstObstacle(): boolean[*][*]
      +getEstNourriture(): boolean[*][*]
      +getQuantityFood(): Integer
      +getQuantityPheromone(): Integer
      +getRow(): Integer
      +getColumn(): Integer
      +setQuantityFood(quantityFood: Integer[*][*])
      +setQuantityPheromone(quantityPheromone: Integer[*][*])
      +setEstNourriture(estNourriture: boolean[*][*])
      +setEstObstacle(estObstacle: boolean[*][*])
  }

  class Colonie #burlywood {
      -{static} nombreColonie = 0:Integer
      -numColonie:Integer
      -evaporationParam: Integer
      -foodParam: Integer
      -pheromoneParam: Integer
      -quantityFood: Integer

      <<Create>>Colonie()
      +getEvaporationParam(): Integer
      +getFoodParam(): Integer
      +getPheromoneParam(): Integer
      +setEvaporationParam(evaporationParam: Integer)
      +setFoodParam(foodParam: Integer)
      +setPheromoneParam(pheromoneParam: Integer)
      +setQuantityFood(quantityFood: Integer)
      {abstract} +toString(): String
  }

  class Noeud #burlywood {
      -coordonneeNoeud: Integer
      +{static} nombreNoeud: 0: Integer

      <<Create>>Noeud(g:Graphe, numeroNoeud:Integer)
      +getCoordonneNoeud()
      +setCoordonneNoeud(coord:Integer)
      +toString(): String
  }

  class AntFacade #back:Wheat;line.bold {
      -grid: BitSet[*][*]
      -graphe: Graphe
      -theSoldiers: ArrayList<Soldat>
      -theWorkers: ArrayList<Ouvrier>
      -reine: Reine
      -width: Integer
      -height: Integer
      -xColonie: Integer
      -yColonie: Integer
      -antHisto: AntFacadeHistorique

      {abstract}  +setParameters(evaporationParam:Integer,
      {abstract}  foodParam:Integer, pheromoneParam:Integer)
      {abstract}  +createGrid(width:Integer, height:Integer)
      {abstract} +putObstacle(row:Integer, column:Integer)
      {abstract}  +putFood(row:Integer, column:Integer, quantity:Integer)
      {abstract}  +createColony(row:Integer, column:Integer)
      {abstract}  +createSoldiers(amount:Integer)
      {abstract}  +createWorkers(amount:Integer)
      {abstract}  +setAntFile(antLogFile:String)
      {abstract}  +play(duration:Integer, record:Boolean) : BitSet[*][*]
  }

    class AntFacadeHistorique #back:Wheat;line.bold {
        -grid: BitSet[*][*]
        -width: Integer
        -height: Integer
        -durationPlay: Integer
        -fLog: File
        -fw: FileWriter
        -graphe: Graphe

        <<Create>>AntFacadeHistorique(width:Integer,
         height:Integer, grid:BitSet[*][*], antLogFile:String, g:Graphe)
        +startFile()
        +iteration(grid:BitSet[*][*], theWorkers:ArrayList<Ouvrier>,
         theSoldiers:ArrayList<Soldat>)
        +closeFile()
    }

  interface Fourmis <<interface>> #lightgreen;line:green {
      +setX(x:Integer);
      +setY(y:Integer);
  }

  class Reine #lightblue;line:green {
      -x: Integer
      -y: Integer
      -colonie: Colonie
      -graphe: Graphe
      -theSoldiers: ArrayList<Soldat>
      -theWorkers: ArrayList<Ouvrier>

      <<Create>>Reine(x:Integer, y:Integer, g:Graphe)
      +giveBirthSoldier(amount:Integer)
      +giveBirthWorker(amount:Integer)
      +setParameters(evaporationParam:Integer,
      foodParam:Integer, pheromoneParam:Integer)
      +getTheSoldiers(): ArrayList<Soldat>
      +getTheWorkers(): ArrayList<Ouvrier>
      +setX(x:Integer)
      +setY(y:Integer)
      +getColonie(): Colonie
  }

  interface IFourmisMove <<interface>> #lightgreen;line:green {
        +randomDirection()
        +noeudVoisin(o:Object, g:Graphe): String
    }

  abstract class FourmisMove #lightgreen;line:green {
     -listNoeud: ArrayList<Noeud>
     -random: Random
     -record: boolean

      +rechercheAretes(x:Integer, y:Integer)
      -verficationNoeud(x:Integer, y:Integer)
      +randomNoeud()
      +probabilityLaw(n, rand)
      +noeudVoisin(o:Object, g:Graphe): String
      +getListNoeud(): ArrayList<Noeud>
  }

    class Soldat #mediumpurple;line:darkviolet {
        -{static} nombreSoldat = 0: Integer
        -colonie: Colonie
        -x: Integer
        -y: Integer
        -g: Graphe
        -positionActuel: Noeud
        -numeroSoldat: Integer

        <<Create>>Soldat(x:Integer, y:Integer, c:Colonie, g:Graphe)
        +recherchePositionActuel(ligne:Integer, colonne:Integer)
        +randomDirection()
        {redefined} +toString(): String
        +getNumeroSoldat(): Integer
        +getPositionActuel(): Noeud
        +setPositionActuel(n:Noeud)
        +getX(): Integer
        +getY(): Integer
        {redefined}+setX(x:Integer)
        {redefined}+setY(x:Integer)
    }

  abstract class MoveOuvrier #gold;line:goldenrod  {
       -x: Integer
       -y: Integer
       -graphe: Graphe
       -positionActuel: Noeud
       -listNoeud: ArrayList<Noeud>
       -listNoeudRetour: ArrayList<Noeud>
       -aVisite: boolean[*][*]
       -etatRetour:boolean
       -quantityFoodTaken: Integer
       -colonie: Colonie
       -random: Random
       -record: boolean
       -estObstacle: boolean[*][*]

      <<Create>>MoveOuvrier(x:Integer, y:Integer, c:Colonie, g:Graphe)
      +randomDirection()
      +cheminRetour()
      +paramOuvrier()
      -rechercheBestPheromone(x:Integer, y:Integer)
      -rechercheAucunPheromone(droitPassage: boolean):boolean
      -rechercheToutVisite(ouvrier:Ouvrier): boolean
      +isEtatRetour(): boolean
      +getListNoeudRetour(): ArrayList<Noeud>
      +getQuantityFoodTaken(): Integer
      +getPositionActuel(): Noeud
      +setListNoeudRetour()
      +setaVisite(x:Integer, y:Integer, bool:boolean)
      +setEtatRetour(etatRetour: Boolean)
      +setQuantityFoodTaken(quantityFoodTaken: Integer)
      +setPositionActuel(position:Noeud)
      +getX(): Integer
      +getY(): Integer
      +setX(x:Integer)
      +setY(y:Integer)
  }

   class Ouvrier #mediumpurple;line:darkviolet {
        -{static} nombreOuvrier = 0: Integer
        -numeroWorker: Integer
        -colonie: Colonie
        -g: Graphe

        <<Create>>Ouvrier(x:Integer, y:Integer, c:Colonie, g:Graphe)
        +recherchePositionActuel(ligne:Integer, colonne:Integer)
        +doitRetravailler(): Boolean
        {redefined} +toString(): String
        +getNumeroWorker()
    }

}

    AntFacadeController <|.. AntFacade : <<implements>>
    AntFacade .right.|> Graphe : <<instantiate>>
    AntFacade ..|> Reine : <<instantiate>>
    AntFacade ..|> AntFacadeHistorique : <<instantiate>>

    Graphe "1" *-right-> "1..*" Noeud : contient

    Reine "1" *-> "1" Colonie : appartient
    Noeud "1" *--> "0..*\t" Fourmis : comporte

    Fourmis <|.. Reine : <<implements>>
    Fourmis <|.. IFourmisMove : <<extends>>

    IFourmisMove <|..FourmisMove : <<implements>>
    FourmisMove <|.. MoveOuvrier : \n\n<<extends>>
    FourmisMove <|.. Soldat : \n\n<<extends>>

    MoveOuvrier <|-- Ouvrier : <<extends>>
    Reine "1" o--> "1..*" Soldat : donne naissance
    Reine "1" o--> "1..*" Ouvrier : donne naissance

    Ouvrier ..> Colonie : <<use>>
    Reine ..> Graphe : <<use>>
    Soldat ..> Colonie : <<use>>
    Ouvrier ..> Graphe : <<use>>
    Soldat ..> Graphe : <<use>>
    FourmisMove ..> Noeud : <<use>>
    FourmisMove ..> Graphe : <<use>>
    MoveOuvrier ..> Noeud : <<use>>
    MoveOuvrier ..> Graphe : <<use>>
    AntFacadeHistorique ..> Soldat : <<use>>
    AntFacadeHistorique ..> Ouvrier : <<use>>



@enduml
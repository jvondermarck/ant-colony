@startuml
'https://plantuml.com/class-diagram

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam roundcorner 20
hide enum methods

package "Diagramme de Classe de Conception V2 " <<Folder>> {
  interface AntFacadeController <<interface>> #pink ##[bold]red {
      +setParameters(evaporationParam:Integer,
      foodParam:Integer, pheromoneParam:Integer)
      +createGrid(width:Integer, height:Integer)
      +putObstacle(row:Integer, column:Integer)
      +putFood(row:Integer, column:Integer, quantity:Integer)
      +createColony(row:Integer, column:Integer)
      +createSoldiers(amount:Integer)
      +createWorkers(amount:Integer)
      +setAntFile(antLogFile:String)
      +play(duration:Integer, record:Boolean) : BitSet[][]
  }

  class Graphe #lightcoral;line.bold {
      -estObstacle[*][*]: Boolean
      -estNourriture[*][*]: Boolean
      -quantityFood[*][*]: Integer
      -quantityPheromone[*][*]: Integer
      -airGraphe:Integer
      -row: Integer
      -column: Integer
      -nbrNoeudDansGraphe:Integer
      -theNoeud[*][*]: Noeud

      <<Create>>Graphe(longueur, largueur)
      +CreationEmplacement();
      +rechercherNoeud(x:Integer, y:Integer) : Noeud
      +rechercherCoord(n: Noeud)
      +gestionNourriture(x:Integer, y:Integer, c:Colonie): Integer
      +mettreObstacle(row:Integer, colomn:Integer)
      +mettreNourriture(row:Integer, colomn:Integer, quantity: Integer)
      +getAirGraphe(): Integer
      +getNbrNoeudDansGraphe(): Integer
      +getTaille(): Integer
      +getEstObstacle(): Boolean[*][*]
      +getEstNourriture(): Boolean[*][*]
      +getQuantityFood(): Integer
      +getQuantityPheromone(): Integer
      +getLongueur(): Integer
      +getLargueur(): Integer
      +setQuantityPheromone(quantityPheromone: Integer[*][*])
      +setEstNourriture(estNourriture: Boolean[*][*])
  }

  class Colonie #burlywood {
      -{static} nombreColonie = 0:Integer
      -numColonie:Integer
      -evaporationParam: Integer
      -foodParam: Integer
      -pheromoneParam: Integer
      -quantityFood: Integer

      <<Create>>Colonie()
      +getEvaporationParam(): Integer
      +getFoodParam(): Integer
      +getPheromoneParam(): Integer
      +setEvaporationParam(evaporationParam: Integer)
      +setFoodParam(foodParam: Integer)
      +setPheromoneParam(pheromoneParam: Integer)
      +setQuantityFood(quantityFood: Integer)
      {abstract} +toString(): String
  }

  class Noeud #burlywood {
      -coordonneeNoeud: Integer
      +{static} nombreNoeud: 0: Integer

      <<Create>>Noeud(g:Graphe, numeroNoeud:Integer)
      +getCoordonneNoeud()
      +setCoordonneNoeud(coord:Integer)
      +toString(): String
  }

  class AntFacade #back:Wheat;line.bold {
      -grid: BitSet[*][*]
      -graphe: Graphe
      -theSoldiers: ArrayList<Soldat>
      -theWorkers: ArrayList<Ouvrier>
      -reine: Reine
      -width: Integer
      -height: Integer
      -xColonie: Integer
      -yColonie: Integer
      -sleepingTime: Long
      -antHisto: AntFacadeHistorique

      {abstract}  +setParameters(evaporationParam:Integer,
      {abstract}  foodParam:Integer, pheromoneParam:Integer)
      {abstract}  +createGrid(width:Integer, height:Integer)
      {abstract} +putObstacle(row:Integer, column:Integer)
      {abstract}  +putFood(row:Integer, column:Integer, quantity:Integer)
      {abstract}  +createColony(row:Integer, column:Integer)
      {abstract}  +createSoldiers(amount:Integer)
      {abstract}  +createWorkers(amount:Integer)
      {abstract}  +setAntFile(antLogFile:String)
      {abstract}  +play(duration:Integer, record:Boolean) : BitSet[*][*]
  }

    class AntFacadeHistorique #back:Wheat;line.bold {
        -grid: BitSet[*][*]
        -width: Integer
        -height: Integer
        -durationPlay: Integer
        -fLog: File
        -fw: FileWriter

        <<Create>>AntFacadeHistorique(width:Integer,
         height:Integer, grid:BitSet[*][*], antLogFile:String)
        +startFile()
        +iteration(grid:BitSet[*][*], theWorkers:ArrayList<Ouvrier>,
         theSoldiers:ArrayList<Soldat>)
        +closeFile()
    }

  interface Fourmis <<interface>> #lightgreen;line:green {
      +setX(x:Integer);
      +setY(y:Integer);
  }

  class Reine #lightblue;line:green {
      -x: Integer
      -y: Integer
      -colonie: Colonie
      -graphe: Graphe
      -theSoldiers: ArrayList<Soldat>
      -theWorkers: ArrayList<Ouvrier>

      <<Create>>Reine(x:Integer, y:Integer, g:Graphe)
      +giveBirth(amount:Integer)
      +giveBirthWorker(amount:Integer)
      +setParameters(evaporationParam:Integer,
      foodParam:Integer, pheromoneParam:Integer)
      +getTheSoldiers(): ArrayList<Soldat>
      +getTheWorkers(): ArrayList<Ouvrier>
      +setX(x:Integer)
      +setY(y:Integer)
      +getColonie(): Colonie
  }

  interface FourmisMove <<interface>> #lightgreen;line:green {
      +randomDirection()
      +getX(x:Integer);
      +getY(y:Integer);
  }

  abstract class MoveSoldat #gold;line:goldenrod {
      #x: Integer
      #y: Integer
      #graphe: Graphe
      #positionActuel: Noeud
      #numeroSoldat: Integer
      -listNoeud: ArrayList<Noeud>
      -random: Random
      -record: boolean

      <<Create>>MoveSoldat(x:Integer, y:Integer, g:Graphe)
      +randomDirection()
      -rechercheAretes(x:Integer, y:Integer)
      -verficationNoeud(x:Integer, y:Integer)
      +noeudVoisin(): String
      +getX(x:Integer);
      +getY(y:Integer);
      +setX(x:Integer);
      +setY(y:Integer);
  }

    class Soldat #mediumpurple;line:darkviolet {
        -{static} nombreSoldat = 0: Integer
        -colonie: Colonie

        <<Create>>Soldat(x:Integer, y:Integer, c:Colonie, g:Graphe)
        +recherchePositionActuel(ligne:Integer, colonne:Integer)
        {redefined} +toString(): String
    }

  abstract class MoveOuvrier #gold;line:goldenrod  {
       #x: Integer
       #y: Integer
       #graphe: Graphe
       #positionActuel: Noeud
       #numeroOuvrier: Integer
       -listNoeud: ArrayList<Noeud>
       #listNoeudRetour: ArrayList<Noeud>
       #aVisite[*][*]: Boolean
       #etatRetour:Boolean
       #quantityFoodTaken: Integer
       #colonie: Colonie
       #positionActuel: Noeud
       -random: Random
       -record: boolean
       -estObstacle: Boolean[*][*]

      <<Create>>MoveOuvrier(x:Integer, y:Integer)
      {redefined}+randomDirection()
      -rechercheAretes(x:Integer, y:Integer)
      -verficationNoeud(x:Integer, y:Integer)
      +cheminRetour()
      -paramOuvrier()
      -rechercheBestPheromone(x:Integer, y:Integer)
      -rechercheAucunPheromone(droitPassage: Boolean):Boolean
      -rechercheToutVisite(ouvrier:Ouvrier): Boolean
      +noeudVoisin(): String
      +getX(): Integer
      +getY(): Integer
      {redefined}+setX(x:Integer)
      {redefined}+setY(y:Integer)
  }

   class Ouvrier #mediumpurple;line:darkviolet {
        -{static} nombreOuvrier = 0: Integer

        <<Create>>Ouvrier(x:Integer, y:Integer, c:Colonie, g:Graphe)
        +recherchePositionActuel(ligne:Integer, colonne:Integer)
        +doitRetravailler(): Boolean
        {redefined} +toString(): String
    }
}


AntFacadeController <|.. AntFacade : <<implements>>
AntFacade .up.|> Graphe : <<instantiate>>
AntFacade ..|> Reine : <<instantiate>>

Graphe "1" *--> "1..*" Noeud : contient

Reine "1" *-> "1" Colonie : appartient
Noeud "1" *--> "0..*\t" Fourmis : comporte

Fourmis <|.. Reine : <<implements>>
Fourmis <|.. FourmisMove : <<extends>>

FourmisMove <|.. MoveOuvrier : \n\n<<implements>>
FourmisMove <|.. MoveSoldat : <<implements>>

MoveSoldat <|-- Soldat : <<extends>>
MoveOuvrier <|-- Ouvrier : <<extends>>
Reine "1" o--> "1..*" Soldat : donne naissance
Reine "1" o--> "1..*" Ouvrier : donne naissance

AntFacade ..> Soldat : <<use>>
AntFacade ..> Ouvrier : <<use>>
MoveSoldat ..> Reine : <<use>>
MoveOuvrier ..> Reine : <<use>>
Ouvrier ..> Colonie : <<use>>
Soldat ..> Colonie : <<use>>
AntFacade "1" o--> "1" AntFacadeHistorique : sauvegarde
AntFacadeHistorique .right.> Soldat : <<use>>
AntFacadeHistorique .right.> Ouvrier : <<use>>
@enduml